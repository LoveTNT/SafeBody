UI
即编写 XML 代码

Android控件的可见属性
可选值有三种，visible、invisible 和 gone
visible 表示控件是可见的，这个值是
默认值，不指定 android:visibility 时，控件都是可见的。invisible 表示控件不可见，但是它仍
然占据着原来的位置和大小，可以理解成控件变成透明状态了。gone 则表示控件不仅不可见，
而且不再占用任何屏幕空间


setVisibility()方法，可以传入 View.VISIBLE、View.INVISIBLE 和 View.GONE 三种值。

AlertDialog 可以在当前的界面弹出一个对话框


 AlertDialog.Builder dialog = new AlertDialog.Builder 
			 (MainActivity.this); 
			    
			 dialog.setTitle("This is Dialog"); 
			       dialog.setMessage("Something important."); 
			       dialog.setCancelable(false); 			   
			       dialog.setPositiveButton("OK", new DialogInterface. 
			    		   OnClickListener() { 
			    	   @Override 
			           public void onClick(DialogInterface dialog, int which) { 
			           } 
			         }); 
			         dialog.setNegativeButton("Cancel", new DialogInterface. 
			   OnClickListener() { 
			           @Override 
			           public void onClick(DialogInterface dialog, int which) { 
			           } 
			         }); 
			         dialog.show(); 
			     	break;
			       }



 详解四种基本布局 

 自定义控件-----view----->Textview imageview viewgroup
 我们所用的所有控件都是直接或间接继承自 View 的，所用的所有布局都是
直接或间接继承自 ViewGroup 的。
View 是 Android 中一种最基本的 UI 组件，它可以在屏幕
上绘制一块矩形区域，并能响应这块区域的各种事件，因此，我们使用的各种控件其实就是
在 View 的基础之上又添加了各自特有的功能。而 ViewGroup 则是一种特殊的 View，它可以
包含很多的子 View 和子 ViewGroup，是一个用于放置控件和布局的容器



我们只需要通过一行 include 语句将标题栏布局引入进来就可以了
 <include layout="@layout/title" /> 

  
  创建自定义控件
 最常用和最难用的控件——ListView 


 adpterlalalalalalalalallalala



 px 是像素的意思，即屏幕中可以显示的最小元素单元
，尽量将控件或布局的大小指定成 match_parent
或 wrap_content，如果必须要指定一个固定值，则使用 dp 来作为单位，指定文字大小的时候
使用 sp 作为单位。




碎片（Fragment）是一种可以嵌入在活动当中的 UI 片段


FragmentFragmentFragmentFragmentFragmentFragmentFragmentFragment
FragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragmentFragment



全局大喇叭，详解广播机制 

。发送广播Intent 接收广播的方法则需要
引入一个新的概念，广播接收器（Broadcast Receiver）


Android 中的广播主要可以分为两种类型，标准广播和有序广播。



注册广播的方式一般有两种，在代
码中注册和在 AndroidManifest.xml 中注册，其中前者也被称为动态注册，后者也被称为静态
注册。


如何创建一个广播接收器呢？其实只需要新建一个类，让它继承自 BroadcastReceiver，
并重写父类的 onReceive()方法就行了

不要在 onReceive()方法中添加过多的逻辑或者进行任何的耗时操作，因为在广播接收
器中是不允许开启线程的，当 onReceive()方法运行了较长时间而没有结束时，程序就会报错。
因此广播接收器更多的是扮演一种打开程序其他组件的角色，比如创建一条状态栏通知，或
者启动一个服务等，

 发送自定义广播 



 

 Button button = (Button) findViewById(R.id.button); 
    button.setOnClickListener(new OnClickListener() { 
      @Override 
      public void onClick(View v) { 
        Intent intent = new Intent("com.example.broadcasttest. 
MY_BROADCAST"); 
        sendOrderedBroadcast(intent, null); 
      } 


      
 <receiver android:name=".MyBroadcastReceiver"> 
            <intent-filter 优先权android:priority="100" > 
                <action android:name="com.example.broadcasttest.MY_BROADCAST"/> 
            </intent-filter> 
        </receiver> 



 @Override 
  public void onReceive(Context context, Intent intent) { 
    Toast.makeText(context, "received in MyBroadcastReceive", 
Toast.LENGTH_SHORT).show(); 
    abortBroadcast();   条广播截断条广播截断
  } 


用本地广播的几点优势

1.  可以明确地知道正在发送的广播不会离开我们的程序，因此不需要担心机密数据泄
漏的问题。 
2.  其他的程序无法将广播发送到我们程序的内部，因此不需要担心会有安全漏洞的隐
患。 
3.  发送本地广播比起发送系统全局广播将会更加高效。

package com.example.testtwo;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.support.v4.content.LocalBroadcastManager;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.Toast;

public class MainActivity extends Activity {
	
	private IntentFilter intentFilter;
	private LocalReceiver localReceiver; 
	private LocalBroadcastManager localBroadcastManager;
	
	
	
	@Override 
	  protected void onCreate(Bundle savedInstanceState) { 
	    super.onCreate(savedInstanceState); 
	    setContentView(R.layout.activity_main); 
	  
	    localBroadcastManager=LocalBroadcastManager.getInstance(this);
	    
	    Button button = (Button) findViewById(R.id.button); 
	    button.setOnClickListener(new OnClickListener() { 
	      @Override 
	      public void onClick(View v) { 
	        Intent intent = new Intent("com.example.broadcasttest.MY_BROADCAST"); 
	       
	        localBroadcastManager.sendBroadcast(intent);
	        
	      } 
	    });
	    intentFilter=new IntentFilter();
	    intentFilter.addAction("com.example.broadcasttest.MY_BROADCAST");
	    localReceiver = new LocalReceiver(); 
	    localBroadcastManager.registerReceiver(localReceiver, intentFilter);
	        
	    
	}
	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		localBroadcastManager.unregisterReceiver(localReceiver);
	}
	
	class LocalReceiver extends BroadcastReceiver{

			 @Override 
			    public void onReceive(Context context, Intent intent) { 
			      Toast.makeText(context, "received local broadcast", 
			Toast.LENGTH_SHORT).show(); 
		}
		
	}
}





git -------------



































